<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.cssrc.ibms.system.model.SysFileType">
	<resultMap id="SysFileType" type="com.cssrc.ibms.system.model.SysFileType">
		<id property="typeId" column="typeId" jdbcType="NUMERIC"/>
		<result property="typeName" column="typeName" jdbcType="VARCHAR"/>
		<result property="nodePath" column="nodePath" jdbcType="VARCHAR"/>
		<result property="depth" column="depth" jdbcType="NUMERIC"/>
		<result property="parentId" column="parentId" jdbcType="NUMERIC"/>
		<result property="nodeKey" column="nodeKey" jdbcType="VARCHAR"/>
		<result property="sn" column="sn" jdbcType="NUMERIC"/>
		<result property="userId" column="userId" jdbcType="NUMERIC"/>
		<result property="depId" column="depId" jdbcType="NUMERIC"/>
		<result property="type" column="type" jdbcType="NUMERIC"/>
		<result property="catKey" column="catKey" jdbcType="VARCHAR"/>
		<result property="isLeaf" column="isLeaf" jdbcType="NUMERIC"/>
		<result property="nodeCode" column="nodeCode" jdbcType="VARCHAR"/>
		<result property="nodeCodeType" column="nodeCodeType" jdbcType="VARCHAR"/>
		<result property="tableId" column="TABLEID" jdbcType="VARCHAR"/>
		<result property="dataId" column="DATAID" jdbcType="VARCHAR"/>
	</resultMap>
	<resultMap type="com.cssrc.ibms.system.model.SysFileType" id="FileTypeExt">
		<result property="childNodes" column="childNodes" jdbcType="NUMERIC"/>
	</resultMap>
	
	<sql id="columns">
		typeId,typeName,nodePath,depth,parentId,nodeKey,sn,userId,depId,type,catKey,isLeaf,nodeCode,nodeCodeType,tableId,dataId
	</sql>
	
	<sql id="dynamicWhere">
		<where>
			<if test="@Ognl@isNotEmpty(typeName)"> AND typeName  LIKE #{typeName}  </if>
			<if test="@Ognl@isNotEmpty(nodePath)"> AND nodePath  LIKE #{nodePath}  AND nodePath  != #{nodePath}</if>
			<if test="@Ognl@isNotEmpty(nodeKey)"> AND nodeKey  = #{nodeKey}  </if>
		</where>
	</sql>

	<insert id="add" parameterType="com.cssrc.ibms.system.model.SysFileType">
		INSERT INTO CWM_SYS_FILE_TYPE
		(<include refid="columns"/>)
		VALUES
		(#{typeId,jdbcType=NUMERIC}, #{typeName,jdbcType=VARCHAR}, #{nodePath,jdbcType=VARCHAR}, 
		#{depth,jdbcType=NUMERIC}, #{parentId,jdbcType=NUMERIC}, #{nodeKey,jdbcType=VARCHAR}, 
		#{sn,jdbcType=NUMERIC}, #{userId,jdbcType=NUMERIC}, #{depId,jdbcType=NUMERIC}, 
		#{type,jdbcType=NUMERIC}, #{catKey,jdbcType=VARCHAR}, #{isLeaf,jdbcType=NUMERIC},
		#{nodeCode,jdbcType=VARCHAR}, #{nodeCodeType,jdbcType=VARCHAR}, #{tableId,jdbcType=VARCHAR},
		#{dataId,jdbcType=VARCHAR})
	</insert>
	
	<delete id="delById" parameterType="java.lang.Long">
		DELETE FROM CWM_SYS_FILE_TYPE 
		WHERE
		typeId=#{typeId}
	</delete>
	
	<delete id="delFileType" parameterType="java.util.Map">
		DELETE FROM CWM_SYS_FILE_TYPE 
		WHERE
		typeId=#{typeId} and dataId=#{dataId}
	</delete>
	
	<update id="update" parameterType="com.cssrc.ibms.system.model.SysFileType">
		UPDATE CWM_SYS_FILE_TYPE SET
		typeName=#{typeName,jdbcType=VARCHAR} , 
		nodePath=#{nodePath,jdbcType=VARCHAR} , 
		depth=#{depth,jdbcType=NUMERIC} , 
		nodeKey=#{nodeKey,jdbcType=VARCHAR} , 
		sn=#{sn,jdbcType=NUMERIC} , 
		parentId=#{parentId,jdbcType=NUMERIC},
		userId=#{userId,jdbcType=NUMERIC} , 
		depId=#{depId,jdbcType=NUMERIC} , 
		type=#{type,jdbcType=NUMERIC} , 
		catKey=#{catKey,jdbcType=VARCHAR} , 
		isLeaf=#{isLeaf,jdbcType=NUMERIC} ,
		nodeCode=#{nodeCode,jdbcType=NUMERIC} ,
		nodeCodeType=#{nodeCodeType,jdbcType=NUMERIC},
		tableId=#{tableId,jdbcType=VARCHAR}
		WHERE
		typeId=#{typeId} and dataId=#{dataId}
	</update>
	
	<update id="updSn" parameterType="com.cssrc.ibms.system.model.SysFileType">
		UPDATE CWM_SYS_FILE_TYPE SET sn=#{sn,jdbcType=NUMERIC}  WHERE typeId=#{typeId}
	</update>
	
	<select id="getById" parameterType="java.lang.Long" resultMap="SysFileType">
		SELECT <include refid="columns"/>
		FROM CWM_SYS_FILE_TYPE
		WHERE
		typeId=#{typeId}
	</select>
	
	<select id="getFileType" parameterType="java.util.Map" resultMap="SysFileType">
		SELECT <include refid="columns"/>
		FROM CWM_SYS_FILE_TYPE
		WHERE
		typeId=#{typeId} and dataId=#{dataId}
	</select>
	
	<select id="getAll" resultMap="SysFileType" parameterType="java.util.Map">
		SELECT <include refid="columns"/>
		FROM CWM_SYS_FILE_TYPE  WHERE CATKEY='FLOW'  
		<include refid="dynamicWhere" />
		<if test="@Ognl@isNotEmpty(orderField)">
		order by ${orderField} ${orderSeq}
		</if>
		<if test="@Ognl@isEmpty(orderField)">
		order by sn
		</if>
	</select>
	
	<select id="getByParentId" parameterType="java.lang.Long" resultMap="FileTypeExt">
		select t.*, (select count(*) from CWM_SYS_FILE_TYPE a where a.parentid=t.typeId) childNodes  
		from CWM_SYS_FILE_TYPE t  
		where parentId=#{parentId}
		order by sn
	</select>
	
	
	
	<select id="isNodeKeyExists" resultType="java.lang.Integer">
		SELECT count(*) FROM CWM_SYS_FILE_TYPE where nodeKey = #{nodeKey,jdbcType=VARCHAR} and catkey=#{catkey,jdbcType=VARCHAR} and dataId =#{dataId}
	</select>
	
	<select id="isNodeKeyExistsForUpdate" resultType="java.lang.Integer">
		SELECT count(*) FROM CWM_SYS_FILE_TYPE where typeId &lt;>#{typeId,jdbcType=NUMERIC} and  nodeKey = #{nodeKey,jdbcType=VARCHAR} and catkey=#{catkey,jdbcType=VARCHAR} and dataId=#{dataId,jdbcType=VARCHAR}
	</select>
	
	<select id="getByNodePath" parameterType="String"  resultMap="SysFileType">
		SELECT * FROM CWM_SYS_FILE_TYPE WHERE nodePath LIKE #{nodePath} and dataId =#{dataId} order by sn
	</select>
	
	<select id="getByCatKey" parameterType="String"  resultMap="FileTypeExt">
		select t.*, (select count(*) from CWM_SYS_FILE_TYPE a where a.parentid=t.typeId) childNodes  
		from CWM_SYS_FILE_TYPE t  
		where catkey=#{catkey,jdbcType=VARCHAR} and dataId=#{dataId,jdbcType=VARCHAR}
		order by sn
	</select>
	
	<select id="getByDictNodeKey" parameterType="String"  resultMap="SysFileType">
		SELECT * FROM CWM_SYS_FILE_TYPE 	WHERE catKey='DIC' and nodeKey=#{nodeKey,jdbcType=VARCHAR}
	</select>
	
	<select id="getByCateKeyAndNodeKey" parameterType="Map"  resultMap="SysFileType">
		SELECT * FROM CWM_SYS_FILE_TYPE 	WHERE catKey=#{catKey,jdbcType=VARCHAR} and nodeKey=#{nodeKey,jdbcType=VARCHAR}
	</select>
	
	<select id="getPersonType" parameterType="Map"  resultMap="SysFileType">
		SELECT * FROM CWM_SYS_FILE_TYPE 	WHERE catkey=#{catkey,jdbcType=VARCHAR} and dataId IN (${dataId}) and (userId=0 or userId=#{userId,jdbcType=NUMERIC} ) 
	</select>
	
	<select id="getByCatKeyAndTypeName" parameterType="Map"  resultMap="SysFileType">
		SELECT * FROM CWM_SYS_FILE_TYPE 	WHERE catKey=#{catKey,jdbcType=VARCHAR} and typeName=#{typeName,jdbcType=VARCHAR}
	</select>
	
</mapper>
