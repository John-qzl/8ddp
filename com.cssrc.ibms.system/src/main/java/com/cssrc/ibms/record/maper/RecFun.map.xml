<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.cssrc.ibms.record.model.RecFun">
	<resultMap id="RecFunction" type="com.cssrc.ibms.record.model.RecFun">
		<id property="funId" column="funId" jdbcType="NUMERIC"/>
		<result property="typeId" column="typeId" jdbcType="NUMERIC"/>
		<result property="funName" column="funName" jdbcType="VARCHAR"/>
		<result property="alias" column="alias" jdbcType="VARCHAR"/>
		<result property="funDesc" column="funDesc" jdbcType="VARCHAR"/>
		<result property="sn" column="sn" jdbcType="NUMERIC"/>
		<result property="icon" column="icon" jdbcType="VARCHAR"/>
		<result property="parentId" column="parentId" jdbcType="NUMERIC"/>
		<result property="defaultUrl" column="defaultUrl" jdbcType="VARCHAR"/>
		<result property="isFolder" column="isFolder" jdbcType="NUMERIC"/>
		<result property="isDisplayInMenu" column="isDisplayInMenu" jdbcType="NUMERIC"/>
		<result property="isOpen" column="isOpen" jdbcType="NUMERIC"/>
		<result property="isNewOpen" column="isNewOpen" jdbcType="NUMERIC"/>
		<result property="path" column="path" jdbcType="VARCHAR" />
		<result property="buttonArr" column="buttonArr" jdbcType="VARCHAR"/>
	</resultMap>
	<sql id="columns">
		funId,typeId,funName,alias,funDesc,sn,icon,parentId,defaultUrl,isFolder,isDisplayInMenu,isOpen,isNewOpen,path,buttonArr
	</sql>
	<sql id="dynamicWhere">
		<where>
			<if test="@Ognl@isNotEmpty(funId)"> AND funId =#{funId} </if>
			<if test="@Ognl@isNotEmpty(typeId)"> AND typeId LIKE #{typeId} </if>
			<if test="@Ognl@isNotEmpty(funName)"> AND funName LIKE #{funName} </if>			
			<if test="@Ognl@isNotEmpty(alias)"> AND alias LIKE #{alias} </if>
			<if test="@Ognl@isNotEmpty(funDesc)"> AND funDesc LIKE #{funDesc} </if>
			<if test="@Ognl@isNotEmpty(sn)"> AND sn =#{sn} </if>
			<if test="@Ognl@isNotEmpty(icon)"> AND icon LIKE #{icon} </if>
			<if test="@Ognl@isNotEmpty(parentId)"> AND parentId =#{parentId} </if>
			<if test="@Ognl@isNotEmpty(defaultUrl)"> AND defaultUrl LIKE #{defaultUrl} </if>
			<if test="@Ognl@isNotEmpty(isFolder)"> AND isFolder =#{isFolder} </if>
			<if test="@Ognl@isNotEmpty(isDisplayInMenu)"> AND isDisplayInMenu =#{isDisplayInMenu} </if>
			<if test="@Ognl@isNotEmpty(isOpen)"> AND isOpen =#{isOpen} </if>
			<if test="@Ognl@isNotEmpty(isNewOpen)"> AND isNewOpen =#{isNewOpen} </if>
		</where>
	</sql>
	
	<insert id="add" parameterType="com.cssrc.ibms.record.model.RecFun">
		INSERT INTO IBMS_REC_FUN
		(<include refid="columns"/>)
		VALUES
		(#{funId,jdbcType=NUMERIC}, #{typeId,jdbcType=NUMERIC}, #{funName,jdbcType=VARCHAR}, #{alias,jdbcType=VARCHAR}, #{funDesc,jdbcType=VARCHAR}, #{sn,jdbcType=NUMERIC}, #{icon,jdbcType=VARCHAR}, #{parentId,jdbcType=NUMERIC}, #{defaultUrl,jdbcType=VARCHAR}, #{isFolder,jdbcType=NUMERIC}, #{isDisplayInMenu,jdbcType=NUMERIC}, #{isOpen,jdbcType=NUMERIC},#{isNewOpen,jdbcType=NUMERIC},#{path,jdbcType=VARCHAR},#{buttonArr,jdbcType=NUMERIC})
	</insert>
	
	<delete id="delById" parameterType="java.lang.Long">
		DELETE FROM IBMS_REC_FUN 
		WHERE
		funId=#{funId}
	</delete>
	
	<update id="update" parameterType="com.cssrc.ibms.record.model.RecFun">
			UPDATE IBMS_REC_FUN SET
			typeId=#{typeId,jdbcType=VARCHAR} , 
			funName=#{funName,jdbcType=VARCHAR} , 
			alias=#{alias,jdbcType=VARCHAR} , 
			funDesc=#{funDesc,jdbcType=VARCHAR} , 
			sn=#{sn,jdbcType=NUMERIC} , 
			icon=#{icon,jdbcType=VARCHAR} , 
			parentId=#{parentId,jdbcType=NUMERIC} , 
			defaultUrl=#{defaultUrl,jdbcType=VARCHAR} , 
			isFolder=#{isFolder,jdbcType=NUMERIC} , 
			isDisplayInMenu=#{isDisplayInMenu,jdbcType=NUMERIC} , 
			isOpen=#{isOpen,jdbcType=NUMERIC} , 
			isNewOpen=#{isNewOpen,jdbcType=NUMERIC},
			path =#{path,jdbcType=VARCHAR},
			buttonArr =#{buttonArr,jdbcType=VARCHAR}
			WHERE
			funId=#{funId}
	</update>
	
	<update id="updSn" parameterType="Map">
		update IBMS_REC_FUN set 
			sn=#{sn,jdbcType=NUMERIC}
		where 
		 funId = #{funId}
	</update>
	
	<select id="getById" parameterType="java.lang.Long" resultMap="RecFunction">
		SELECT <include refid="columns"/>
		FROM IBMS_REC_FUN
		WHERE
		funId=#{funId}
	</select>	
	<select id="getAll" resultMap="RecFunction">
		SELECT <include refid="columns"/>
		FROM IBMS_REC_FUN 
		<include refid="dynamicWhere" />
		<if test="@Ognl@isNotEmpty(orderField)">
			ORDER BY ${orderField} ${orderSeq}
		</if>
		<if test="@Ognl@isEmpty(orderField)">
			ORDER BY sn
		</if>
	</select>
	<select id="getByParentId" parameterType="java.lang.Long" resultMap="RecFunction">
		SELECT <include refid="columns"/> FROM IBMS_REC_FUN WHERE parentId=#{parentId} ORDER BY sn
	</select>
	<select id="getByTypeId" parameterType="java.lang.Long" resultMap="RecFunction">
		SELECT <include refid="columns"/> FROM IBMS_REC_FUN WHERE typeId=#{typeId} ORDER BY sn
	</select>

	<select id="getByUrl" parameterType="java.lang.String" resultMap="RecFunction">
		SELECT <include refid="columns"/> FROM IBMS_REC_FUN WHERE defaultUrl=#{url} 
	</select>
	
	
	<select id="getNormMenu" parameterType="java.util.Map" resultMap="RecFunction">
	SELECT fun.funId,fun.funName,fun.alias,fun.sn,fun.icon,fun.parentId,fun.defaultUrl,
         fun.isFolder,fun.isDisplayInMenu,fun.isOpen,fun.isNewOpen FROM IBMS_REC_FUN fun WHERE RESID IN  (1,2)
    UNION  
		SELECT DISTINCT fun.funId,fun.funName,fun.alias,fun.sn,fun.icon,fun.parentId,fun.defaultUrl,
		fun.isFolder,fun.isDisplayInMenu,fun.isOpen,fun.isNewOpen
		FROM 
		CWM_SYS_ROLE_RES role_fun,
		CWM_SYS_ROLE_USER user_role,
		IBMS_REC_FUN fun
		WHERE user_role.userId=#{userId} 	AND role_fun.roleId=user_role.roleId
	 	AND role_fun.funId=fun.funId 
	 	AND fun.isDisplayInMenu=1
		ORDER BY sn
		
	</select>
	
	<select id="getNormMenuByUser" parameterType="java.util.Map" resultMap="RecFunction">
	 SELECT fun.funId,fun.funName,fun.alias,fun.sn,fun.icon,fun.parentId,fun.defaultUrl,
         fun.isFolder,fun.isDisplayInMenu,fun.isOpen,fun.isNewOpen FROM IBMS_REC_FUN fun WHERE RESID IN  (1,2)
    UNION  
		SELECT DISTINCT fun.funId,fun.funName,fun.alias,fun.sn,fun.icon,fun.parentId,fun.defaultUrl,
		 fun.isFolder,fun.isDisplayInMenu,fun.isOpen,fun.isNewOpen
		 FROM 
		 CWM_SYS_ROLE_RES role_fun,
		 IBMS_REC_FUN fun,
		 CWM_SYS_ROLE_USER ur ,CWM_SYS_ROLE r
		 WHERE role_fun.roleId = ur.roleId
		 and ur.userId=#{userId}
		 and ur.roleId=r.ROLEID
		 and r.STATUS=1
		 AND role_fun.funId=fun.funId
		 AND fun.isDisplayInMenu=1
	 	ORDER BY sn		
	</select>
	
	<select id="getNormMenuByAllRole" parameterType="java.util.Map" resultMap="RecFunction">
	 SELECT fun.funId,fun.funName,fun.alias,fun.sn,fun.icon,fun.parentId,fun.defaultUrl,
         fun.isFolder,fun.isDisplayInMenu,fun.isOpen,fun.isNewOpen FROM IBMS_REC_FUN fun WHERE RESID IN  (1,2)
    UNION  
		SELECT DISTINCT fun.funId,fun.funName,fun.alias,fun.sn,fun.icon,fun.parentId,fun.defaultUrl,
		 fun.isFolder,fun.isDisplayInMenu,fun.isOpen,fun.isNewOpen
		 FROM 
		 CWM_SYS_ROLE_RES role_fun,
		 IBMS_REC_FUN fun
		 WHERE role_fun.roleId in (select t.roleid from CWM_SYS_ROLE t where t.alias in (${rolealias})) 
			AND role_fun.funId=fun.funId 
			AND fun.isDisplayInMenu=1
	 	 ORDER BY sn		
	</select>
	
	
	<select id="getSuperMenu" parameterType="Long" resultMap="RecFunction">
	SELECT fun.funId,fun.funName,fun.alias,fun.sn,fun.icon,fun.parentId,fun.defaultUrl,
         fun.isFolder,fun.isDisplayInMenu,fun.isOpen,fun.isNewOpen FROM IBMS_REC_FUN fun WHERE RESID IN  (1,2)
    UNION  
		SELECT DISTINCT fun.funId,fun.funName,fun.alias,fun.sn,fun.icon,fun.parentId,fun.defaultUrl,
		 fun.isFolder,fun.isDisplayInMenu,fun.isOpen,fun.isNewOpen
		 FROM 
		 CWM_SYS_ROLE_RES role_fun,
		 IBMS_REC_FUN fun,
		 CWM_SYS_ROLE_USER ur ,CWM_SYS_ROLE r
		 WHERE role_fun.roleId = ur.roleId
		 and ur.userId=#{userId}
		 and ur.roleId=r.ROLEID
		 and r.STATUS=1
		 AND role_fun.funId=fun.funId
		 AND fun.isDisplayInMenu=1
	 	ORDER BY sn	
	</select>	
		
	<select id="isAliasExists" resultType="Integer">
		SELECT count(1) as count FROM IBMS_REC_FUN WHERE alias=#{alias}
	</select>
	
	<select id="isAliasExistsForUpd" resultType="Integer">
		SELECT count(1) as count FROM IBMS_REC_FUN WHERE alias=#{alias} and funId!=#{funId}
	</select>
	
	<select id="getByAlias" parameterType="java.lang.String" resultMap="RecFunction">
		SELECT <include refid="columns"/>
		FROM IBMS_REC_FUN
		WHERE
		Alias=#{alias}
	</select>
	
	<select id="getByParentUserId" parameterType="java.util.Map" resultMap="RecFunction">
		select * from IBMS_REC_FUN r where r.funId in (
		select  fun.funId  from  IBMS_REC_FUN fun,CWM_SYS_ROLE_RES rr,CWM_SYS_ROLE_USER ur 
		where fun.PARENTID=#{funId} and fun.RESID=rr.RESID 
		and rr.ROLEID=ur.ROLEID 
		<if test="@Ognl@isNotEmpty(userId)"> and ur.USERID=#{userId}  </if>
		) ORDER BY r.sn
	</select>
	
	<select id="getFunByRoles" parameterType="java.util.Map" resultMap="RecFunction">
		SELECT DISTINCT 
			fun.*
		 FROM 
		 IBMS_REC_FUN fun
		 LEFT JOIN ibms_rec_role_fun role_fun ON role_fun.funId=fun.funId		 
		 WHERE role_fun.roleId in (select t.roleid from ibms_rec_role t where t.alias in (${rolealias})) 
	 	 ORDER BY sn		
	</select>
	<select id="getFunByRoleSons" parameterType="java.util.Map" resultMap="RecFunction">
		SELECT DISTINCT 
			fun.*
		 FROM 
		 IBMS_REC_FUN fun
		 LEFT JOIN ibms_rec_roleson_fun rs_fun ON rs_fun.funId=fun.funId		 
		 WHERE rs_fun.roleSonId in 
		 (select t.roleSonId from ibms_rec_roleson t where t.alias in (${roleSonAlias}) and t.dataId = #{dataId}) 
	 	 ORDER BY sn		
	</select>
</mapper>